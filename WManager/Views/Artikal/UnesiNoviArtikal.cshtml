@model WManager.Models.Artikal

@{
    ViewBag.Title = "UnesiNoviArtikal";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
    



@using (Html.BeginForm("UnesiNoviArtikal","Artikal",FormMethod.Post, new { @class="tableForm"}))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Unesi novi artikal</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Barkod, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.Barkod, new { htmlAttributes = new { @class = "form-control", @id = "barkodPolje",@onkeyup="onemoguciPolja()" } })
            @Html.ValidationMessageFor(model => model.Barkod, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-6">
            <button type="button" class="btnTrazi" onclick="proveriArtikal()">Trazi artikal</button>
        </div>
    </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Naziv, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Naziv, new { htmlAttributes = new { @class = "form-control shouldCheckFirst" } })
                @Html.ValidationMessageFor(model => model.Naziv, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Kolicina, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Kolicina, new { htmlAttributes = new { @class = "form-control shouldCheckFirst" } })
                @Html.ValidationMessageFor(model => model.Kolicina, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZemljaPorekla, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZemljaPorekla, new { htmlAttributes = new { @class = "form-control shouldCheckFirst" } })
                @Html.ValidationMessageFor(model => model.ZemljaPorekla, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Proizvodjac, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Proizvodjac, new { htmlAttributes = new { @class = "form-control shouldCheckFirst" } })
                @Html.ValidationMessageFor(model => model.Proizvodjac, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btnTrazi shouldCheckFirst" style="margin-left: 70px !important">Unesi novi</button>
            </div>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    function proveriArtikal() {

        var barkod = document.getElementById("barkodPolje").value
        console.log(barkod);
        if (barkod !== "") {
            $.ajax({
                type: "POST",
                url: '@Url.Action("TraziArtikal","Artikal")',
                data: '{barkod: "' + document.getElementById("barkodPolje").value + '"}',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data.status == 1) {
                        porukaNeuspeh("Artikal sa unetim barkodom već postoji!");
                        onemoguciPolja();
                    }
                    if (data.status == 0) {
                        porukaUspeh("Ne postoji, nastavi unos");
                        omoguciPolja();
                    }
                    if (data.status == 2) {
                        porukaNeuspeh("Poslat barkod pogresne duzine!");
                        onemoguciPolja();
                    }
                }
               
            });
        }
        else {
             porukaNeuspeh("Barkod mora imati 13 brojeva!");
        }
    }
</script>
}
